generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum LeaveStatus {
  pending
  approved
  declined
}
enum JobType {
  remote 
  onsite
  contract
}
enum  MainStatus {
  ongoing
  completed
}
enum AttendanceStatus {
  late
  half_time
  present
  absent
}
enum UserRole {
  ADMIN
  EMPLOYEE
}
enum LeaveType {
  casual
  medical
  half_leave
}

enum ProjectStatus {
  in_progress
  completed
}

model User {
  id              String           @id @default(uuid())
  name            String
  email           String           @unique
  phone           String?
  image           String?
  position        String?
  bio       String?
  dateOfJoining DateTime?
  role            UserRole        @default(ADMIN)
  password        String?
  emailVerified   DateTime?
  createdAt       DateTime         @default(now())
leaveRequests  LeaveRequest[]
  leaveBalances  LeaveBalance[]
  attendances      Attendance[]
  projectTimeLogs  ProjectTimeLog[]
  jobtype    JobType? @default(onsite)

  assignedProjects      UserProject[]       @relation("EmployeeAssignments") // As Employee
  givenAssignments      UserProject[]       @relation("AdminAssignments")    // As Admin (assigned others)
   lastLoginAt  DateTime?

    @@map("users")

   todayTask todayTask[]
}

model Attendance {
  id        String           @id @default(uuid())
  userId    String
  date      DateTime         @default(now())
  status    AttendanceStatus 
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date], name: "unique_user_day_attendance")
  @@map("attendances")
}
model ProjectTimeLog {
  id          String    @id @default(uuid())
  userId      String
  projectId   String
  date        DateTime
  hoursWorked Float     
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId, date], name: "unique_project_time_log")
  @@map("project_time_logs")
}



model Project {
  id          String        @id @default(uuid())
  name        String
  detail      String?
  projectType String?
  createdAt   DateTime      @default(now())
  mainDeadline DateTime
  mainStatus  MainStatus @default(ongoing)
  // Relations
  assignments UserProject[]
  timeLogs    ProjectTimeLog[] 
  @@map("projects")
}
model UserProject {
  id         String         @id @default(uuid())
  userId     String
  workDetail String
  projectId  String
  assignedBy String
  employeeDeadline   DateTime
  assignedAt DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  status     ProjectStatus  @default(in_progress)
  // Relations
  user       User           @relation("EmployeeAssignments", fields: [userId], references: [id], onDelete: Cascade)
  project    Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  admin      User          @relation("AdminAssignments", fields: [assignedBy], references: [id], onDelete: Cascade)

  @@unique([userId, projectId], name: "user_project_unique")

  @@map("user_projects")
}


model LeaveRequest {
  id        String      @id @default(uuid())
  userId    String
  reason    String
  fromDate  DateTime
  toDate    DateTime
  type      LeaveType 
  status    LeaveStatus @default(pending)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("leave_requests")
}
model LeaveBalance {
  id        String     @id @default(uuid())
  userId    String
  total     Int     // Total leaves allocated
  used      Int        // Leaves used (calculated or tracked)
  remaining Int        // Remaining leaves (total - used)

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map("leave_balances")
}



model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token], name: "verification_token_unique")

  @@map("verification_token")
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token], name: "password_reset_token_unique")

  @@map("password_reset_token")
}
model todayTask {
  id        String   @id @default(uuid())
  userId    String
  task      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("today_tasks")
}